<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.mvc_board.mapper.BoardMapper">
	<!-- 게시물 등록 - INSERT -->
	<!-- 
	글번호(board_num) 컬럼이 일반 정수 컬럼이며 자동 증가 컬럼이 아니므로 직접 글번호 생성 필요
	이 때, 기존 게시물 번호 중 가장 큰 번호 조회 후 + 1 값을 새 글 번호와 참조글 번호로 사용
	=> 마이바티스의 INSERT, UPDATE 작업 과정(DELETE 제외)에서 
	   SELECT 구문 조회 결과값을 활용해야할 경우 <selectKey> 태그를 <insert> 등의 태그 내에서 사용하여
	   작업 전 또는 후에 특정 데이터 조회 수행 및 해당 값을 활용 가능
	   - keyProperty 속성 : 조회(SELECT) 결과 값을 저장할 속성명(VO 객체의 멤버변수명도 지정 가능)
	                        => 조회 후 자동으로 해당 객체의 변수(또는 일반 변수)에 결과값 저장됨
	                           ex) BoardVO 객체를 파라미터로 전달받았을 때 board_num 변수 지정 시
	                               해당 객체 내의 멤버변수 board_num 에 조회 결과값 저장됨
	   - resultType 속성 : 조회(SELECT) 결과에 대한 데이터타입(마이바티스에서 처리하는 타입)
	   - order 속성 : 작업 수행 시점(메인 작업 전 수행 시 BEFORE, 작업 후 수행 시 AFTER 선택)
	-->
	<insert id="insertBoard">
		<!-- 기존 게시물들 중 가장 큰 글번호(board_num) 조회 - SELECT -->
		<!-- 단, 조회 결과가 없을 경우 null 값 대신 0 이 기본값으로 설정되도록 처리 => IFNULL() 활용 -->
		<selectKey keyProperty="board_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(board_num), 0)
			FROM board
		</selectKey>
		
		<!-- selectKey 를 통해 조회된 글번호 + 1 값을 새 글 번호와 참조글 번호 값으로 사용 -->
		<!-- 이 때, keyProperty 에 지정한 이름을 변수처럼 활용 => #{board_num} -->
		INSERT
		INTO board
		VALUES (
			#{board_num} + 1     -- 글번호
			, #{board_name}
			, #{board_subject}
			, #{board_content}
			, #{board_file}      -- 다중 파일 업로드를 구현하지 않았지만 일단 INSERT 에 포함
			, #{board_file1}
			, #{board_file2}
			, #{board_file3}
			, #{board_num} + 1   -- 참조글번호(board_re_ref) => 새 글 번호와 동일한 값 사용
			, 0                  -- 들여쓰기레벨(board_re_lev) => 기본값 0
			, 0                  -- 글순서번호(board_re_seq) => 기본값 0
			, 0                  -- 조회수(board_readcount) => 기본값 0
			, now()              -- 작성일시
			, #{board_writer_ip} 
					
		)
	</insert>
	
	<!-- 게시물 목록 조회 - SELECT -->
	<!-- board 테이블의 전체 레코드 조회(startRow, listLimit 파라미터값을 LIMIT 절에 적용해서 갯수 제한) -->
<!-- 	<select id="selectBoardList" resultType="board"> -->
<!-- 		SELECT * -->
<!-- 		FROM board -->
<!-- 		ORDER BY -->
<!-- 			board_re_ref DESC -->
<!-- 			, board_re_seq ASC -->
<!-- 		LIMIT  -->
<!-- 			#{startRow}     -->
<!-- 			, #{listLimit}  -->
<!-- 	</select> -->
	
	<!-- 글 목록 조회 시 검색 기능 추가 -->
	<select id="selectBoardList" resultType="board">
		SELECT *
		FROM board
		
		<!-- 
		1. 검색어(searchKeyword)가 널스트링이 아닐 때 검색어를 추가하기 위한 WHERE 절 추가
		   => 검색어 데이터는 searchKeyword 변수에 저장되어 있음(@Param("searchKeyworkd))
		   => 자바 문법과 동일하게 equals() 메서드를 통해 문자열 비교 수행
		-->
		<if test="!searchKeyword.equals('')">
			WHERE
			<!-- 
			2. 검색타입(searchType)에 따른 WHERE 조건의 대상 컬럼명 변경하여 조건 작성
			   => searchType 변수의 문자열 비교(subject, content, subject_content, name)
			   => 경우의 수가 2개 이상이므로 <choose><when><otherwise> 사용
			-->
			<choose>
				<!-- 1) 제목으로 검색했을 경우 -->
				<when test="searchType.equals('subject')">
					<!-- 만약, '%#{searchKeyword}%' 형식으로 지정 시 오류 발생('%'검색어'%') -->
<!-- 					board_subject LIKE '%#{searchKeyword}%' -->

					<!-- '%${searchKeyword}%' 형식으로 지정 시 정상 동작('%검색어%') -->
<!-- 					board_subject LIKE '%${searchKeyword}%' -->
						
					<!-- CONCAT() 함수 활용하여 "%" 문자와 검색어 결합도 가능 -->
					<!-- 단, 이 경우에는 searchKeyword 데이터의 타입 감지가 필요하므로 # 사용 -->
					board_subject LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 2) 내용으로 검색했을 경우 -->
				<when test="searchType.equals('content')">
<!-- 					board_content LIKE '%${searchKeyword}%' -->
					board_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 3) 제목&내용으로 검색했을 경우 -->
				<when test="searchType.equals('subject_content')">
					<!-- 제목&내용의 경우 제목 또는 내용 둘 중 하나의 조건만 일치하면 됨 - OR 활용 -->
					board_subject LIKE CONCAT('%', #{searchKeyword}, '%')
					OR board_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 4) 작성자로 검색했을 경우 -->
				<when test="searchType.equals('name')">
<!-- 					board_name LIKE '%${searchKeyword}%' -->
					board_name LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 5) 만약, searchType 값이 잘못된 값일 경우 -->
				<!--    WHERE 절은 무조건 추가되므로 조건을 무효화시키기 위해 -->
				<!--    항상 true 가 되는 조건식을 아무거나 작성하면 된다! -->
				<otherwise>
					1 = 1   -- 항상 true 가 되는 조건식
				</otherwise>
			</choose>
		</if>
		
		ORDER BY
			board_re_ref DESC
			, board_re_seq ASC
		LIMIT 
			#{startRow}    -- Mapper 내의 메서드에서 @Param("startRow") 로 지정한 파라미터명
			, #{listLimit} -- Mapper 내의 메서드에서 @Param("listLimit") 로 지정한 파라미터명
	</select>
	
	<!-- 전체 게시물 수 조회 - SELECT -->
<!-- 	<select id="selectBoardListCount" resultType="int"> -->
<!-- 		SELECT COUNT(*) -->
<!-- 		FROM board	 -->
<!-- 	</select> -->

	<!-- 검색 기능 추가를 위해 검색어에 따른 결과 게시물 수 조회 -->
	<select id="selectBoardListCount" resultType="int">
		SELECT COUNT(*)
		FROM board	
		<if test="!searchKeyword.equals('')">
			WHERE
			<choose>
				<when test="searchType.equals('subject')">
					board_subject LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('content')">
					board_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('subject_content')">
					board_subject LIKE CONCAT('%', #{searchKeyword}, '%')
					OR board_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('name')">
					board_name LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<otherwise>
					1 = 1   -- 항상 true 가 되는 조건식
				</otherwise>
			</choose>
		</if>
	</select>
	
	<!-- 게시물 상세정보 조회 - SELECT -->
	<select id="selectBoard" resultType="board">
		SELECT *
		FROM board
		WHERE board_num = #{board_num}
	</select>
	
	<!-- 게시물 조회수 증가 - UPDATE -->
	<!-- 
	글번호에 해당하는 레코드(게시물)의 조회수(board_readcount) 컬럼값 1 증가
	이 때, 증가된 조회수를 외부로 전달하기 위해 <selectKey> 태그 활용하여
	조회수 증가 작업 이후에 조회수값을 조회하여 BoardVO 객체의 board_readcount 멤버변수에 저장 필요
	=> 매퍼 메서드 파라미터로 BoardVO 객체를 전달받았을 경우 keyProperty 속성값으로
	   BoardVO 객체의 멤버변수명(board_readcount) 지정 시 조회 결과가 해당 멤버변수에 자동으로 저장됨
	=> BoardVO 객체를 BoardController 클래스부터 모두 공유중이므로 별도의 리턴없이도 객체값 공유 가능
	-->
	<update id="updateReadcount">
		<selectKey keyProperty="board_readcount" resultType="int" order="AFTER">
			SELECT board_readcount
			FROM board
			WHERE board_num = #{board_num}
		</selectKey>
		UPDATE board
		SET board_readcount = board_readcount + 1
		WHERE board_num = #{board_num}
	</update>
	
	<!-- 게시물 삭제 - DELETE -->
	<delete id="deleteBoard">
		DELETE
		FROM board
		WHERE board_num = #{board_num}
	</delete>
	
	<!-- 
	게시물 수정 - UPDATE
	- 글 번호가 일치하는 레코드의 정보 수정
	- 제목과 내용은 무조건 수정
	- 단, 파일명 3개(board_fileX) 중 비어있지 않은 파일명만 컬럼값을 수정
	  => 즉, 파일명 3개를 각각 비어있는지 판별 후 SET 절에 구문 추가
	-->
	<update id="updateBoard">
		UPDATE board
		SET
			board_subject = #{board_subject}
			, board_content = #{board_content}
			<if test="!board_file1.equals('')">
				, board_file1 = #{board_file1}  -- board_file1 UPDATE
			</if>
			<if test="!board_file2.equals('')">
				, board_file2 = #{board_file2}  -- board_file2 UPDATE
			</if>
			<if test="!board_file3.equals('')">
				, board_file3 = #{board_file3}  -- board_file3 UPDATE
			</if>
		WHERE
			board_num = #{board_num}
	</update>
	
	<!-- 
	새 답글 등록을 위한 기존 답글들의 순서번호 조정 - UPDATE
	- 참조글 번호(board_re_ref)가 대상(원본) 게시물의 참조글 번호와 같고
	  순서 번호(board_re_seq)가 대상 게시물의 순서번호보다 더 큰 레코드들의 
	  순서번호를 1씩 증가(+1)처리
	-->
	<update id="updateBoardReSeq">
		UPDATE board
		SET
			board_re_seq = board_re_seq + 1
		WHERE
			board_re_ref = #{board_re_ref}
			AND board_re_seq > #{board_re_seq}
	</update>
	
	<!-- 
	새 답글 등록 - INSERT
	=> 기본적으로 새 글 등록 작업과 대부분 동일하지만
	   참조글번호는 전달받은 원본글의 참조글번호를 그대로 사용하고
	   순서번호와 들여쓰기레벨은 전달받은 원본글의 값 + 1 처리 후 사용 
	-->
	<insert id="insertReplyBoard">
		<!-- 기존 게시물들 중 가장 큰 글번호(board_num) 조회 - SELECT -->
		<!-- 단, 조회 결과가 없을 경우 null 값 대신 0 이 기본값으로 설정되도록 처리 => IFNULL() 활용 -->
		<selectKey keyProperty="board_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(board_num), 0)
			FROM board
		</selectKey>
		
		<!-- selectKey 를 통해 조회된 글번호 + 1 값을 새 글 번호 값으로 사용 -->
		<!-- 이 때, keyProperty 에 지정한 이름을 변수처럼 활용 => #{board_num} -->
		INSERT
		INTO board
		VALUES (
			#{board_num} + 1 
			, #{board_name}
			, #{board_subject}
			, #{board_content}
			, #{board_file}      
			, #{board_file1}
			, #{board_file2}
			, #{board_file3}
			, #{board_re_ref}      -- board_re_ref(전달받은 원본글의 값 사용) => 글쓰기와 다름
			, #{board_re_lev} + 1  -- board_re_lev(전달받은 원본글의 값 + 1 사용) => 글쓰기와 다름
			, #{board_re_seq} + 1  -- board_re_seq(전달받은 원본글의 값 + 1 사용) => 글쓰기와 다름
			, 0                  
			, now()              
			, #{board_writer_ip} 
					
		)
	</insert>
	
	<!-- 게시물 파일 삭제 - UPDATE -->
	<!-- 글번호(board_num)가 일치하는 레코드의 해당 파일에 대한 컬럼값을 널스트링('')으로 수정 -->
	<!-- 1) 동적 SQL 활용하여 파일 번호(index)가 일치하는 컬럼의 파일명 수정 -->
	<!-- ex) UPDATE board SET board_file3 = '' WHERE board_num = '46'  -->
<!-- 	<update id="deleteBoardFile"> -->
<!-- 		UPDATE board -->
<!-- 		SET  -->
<!-- 			<choose> -->
<!-- 				<when test="index eq 1"> -->
<!-- 					board_file1 = '' -->
<!-- 				</when> -->
<!-- 				<when test="index eq 2"> -->
<!-- 					board_file2 = '' -->
<!-- 				</when> -->
<!-- 				<when test="index eq 3"> -->
<!-- 					board_file3 = '' -->
<!-- 				</when> -->
<!-- 			</choose> -->
<!-- 		WHERE -->
<!-- 			board_num = #{board_num} -->
<!-- 	</update> -->

	<!-- 
	2) SQL 구문의 SET 절에 CASE 문 결합하여 각 컬럼의 파일명이 삭제할 파일명과 같은지 여부 판별하고
	   같을 경우 원하는 값(널스트링)으로 수정, 아니면 기존 파일명 그대로 덮어쓰기
	   => board_file1 ~ 3 컬럼의 파일명이 전달받은 file 과 같으면 '', 아니면 기존 파일명 사용
	   => SET [변경할컬럼명] = CASE WHEN [조건식] THEN [true일때 값] ELSE [false일때 값] END
	-->
	<update id="deleteBoardFile">
		UPDATE board
		SET 
			board_file1 = CASE WHEN board_file1 = #{file} THEN '' ELSE board_file1 END,
			board_file2 = CASE WHEN board_file2 = #{file} THEN '' ELSE board_file2 END,
			board_file3 = CASE WHEN board_file3 = #{file} THEN '' ELSE board_file3 END
		WHERE
			board_num = #{board_num}
	</update>
	
	<!-- ===================================================================== -->
	<!-- 
	[ 댓글 테이블 정의 - tiny_reply_board ]
	댓글번호(reply_num) - 정수, PK
	원본 게시물 번호(board_num) - 정수, NN, FK(board 테이블의 board_num)
	부모(상위) 댓글번호(parent_reply_num) - 정수, NN
	작성자(reply_writer) - 문자 16자, NN, FK(member 테이블의 id)
	댓글내용(reply_content) - 문자 500자, NN
	댓글그룹번호(reply_re_ref) - 정수, NN
	댓글들여쓰기레벨(reply_re_lev) - 정수, NN
	댓글순서번호(reply_re_seq) - 정수, NN
	작성일시(reply_reg_date) - DATETIME, NN
	작성자IP주소(reply_writer_ip) - 문자 16자, NN
	댓글삭제상태(reply_delete_status) - 정수, NN, 기본값 0 (0 : 정상, 1 : 삭제)
	========================================
	CREATE TABLE tiny_reply_board (
		reply_num INT PRIMARY KEY,
		board_num INT NOT NULL,
		parent_reply_num INT NOT NULL,
		reply_writer VARCHAR(16) NOT NULL,
		reply_content VARCHAR(500) NOT NULL,
		reply_re_ref INT NOT NULL,
		reply_re_lev INT NOT NULL,
		reply_re_seq INT NOT NULL,
		reply_reg_date DATETIME NOT NULL,
		reply_writer_ip VARCHAR(16) NOT NULL,
		reply_delete_status INT NOT NULL DEFAULT 0,
		FOREIGN KEY (board_num) REFERENCES board(board_num),
		FOREIGN KEY (reply_writer) REFERENCES member(id)
	);
	-->
	<!-- 댓글 등록 - INSERT -->
	<!-- 기본적으로 답글 쓰기와 거의 동일 -->
	<insert id="insertTinyReplyBoard">
		<selectKey keyProperty="reply_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(reply_num), 0)
			FROM tiny_reply_board
		</selectKey>
		INSERT
		INTO tiny_reply_board
		VALUES (
			#{reply_num} + 1     -- 댓글번호(selectkey 를 통해 조회된 번호 + 1)
			,#{board_num}        -- 원본 게시물 번호(전달받은 값)
			, 0                  -- 부모 댓글번호(부모 댓글이 없는 원본 댓글이므로 기본값 0)
			, #{reply_writer}    -- 댓글 작성자(전달받은 값)
			, #{reply_content}   -- 댓글 내용(전달받은 값)
			, #{reply_num} + 1   -- 참조글번호(reply_re_ref) => 새 댓글 번호와 동일한 값 사용
			, 0                  -- 들여쓰기레벨(reply_re_lev) => 기본값 0
			, 0                  -- 글순서번호(reply_re_seq) => 기본값 0
			, now()              -- 작성일시
			, #{reply_writer_ip} -- 작성자 IP 주소
			, 0                  -- 댓글 삭제 상태(기본값 0, null 전달해도 0)
		)
	</insert>
	
	<!-- 댓글 목록 조회 - SELECT -->
	<!-- 작성된 댓글 순으로 정렬(최신 댓글이 아래쪽에 위치) -->
	<!-- 참조글번호(ref) - 오름차순, 순서번호(seq) - 오름차순 -->
	<!-- 특이사항) resultType 을 Map 타입으로 지정 시 날짜 및 시각 정보가 기존 VO 와 달라짐 -->
	<!--           날짜와 시각 사이에 문자 "T" 가 추가됨(제네릭타입은 String, Object 등 무관) -->
	<select id="selectTinyReplyBoardList" resultType="map">
		SELECT *
		FROM tiny_reply_board
		WHERE board_num = #{board_num}
		ORDER BY 
			reply_re_ref ASC
			, reply_re_seq ASC	
	</select>
	
	<!-- 
	대댓글 작성을 위한 기존 댓글들의 순서번호 조정 - UPDATE
	- 원본 게시물 번호(board_num) 가 대상 댓글의 원본 게시물 번호와 같고(답글과 달리 추가된 항목)
	  그룹(참조글) 번호(reply_re_ref)가 대상(원본) 댓글의 그룹 번호와 같고
	  순서번호(reply_re_seq)가 대상 댓글의 순서번호보다 크고
	  부모댓글 번호가 새 댓글의 부모 댓글번호와 다른 레코드들의(2차 이상의 댓글 순서 정렬 때문에 추가된 항목)
	  순서번호를 1씩 증가(+1)처리
	-->
	<update id="updateTinyReplyBoardReSeq">
		UPDATE tiny_reply_board
		SET
			reply_re_seq = reply_re_seq + 1
		WHERE
			board_num = #{board_num}
			AND reply_re_ref = #{reply_re_ref}
			AND reply_re_seq > #{reply_re_seq}
			AND parent_reply_num != #{reply_num}
	</update>
	
	<!-- 
	새 대댓글 등록 - INSERT
	=> 기본적으로 새 글 등록 작업과 대부분 동일하지만
	   새 댓글번호 조회와 함께 동일한 부모 댓글의 대댓글들에 대한 순서번호 조회도 필요함(서브쿼리 추가)
	-->
	<insert id="insertTinyReReplyBoard">
		<!-- 
		기존 댓글들 중 가장 큰 댓글 번호(reply_num) 조회 - SELECT
		단, 조회 결과가 없을 경우 null 값 대신 0 이 기본값으로 설정되도록 처리 => IFNULL() 활용
		=============
		추가> 부모 댓글번호가 같은 댓글들 중 가장 큰 순서번호(reply_re_seq)도 조회 
		      => 서브쿼리 활용 필요
		      => 주의! 부모 댓글번호가 같은 댓글들이 없을 경우(null 값)
		         기본값으로 0이 아닌 부모 댓글의 순서번호를 설정 
		-->
		<!-- 
		조회 결과가 복수개일 때, resultType 을 map 타입으로 지정 후 keyProperty 지정 시
		keyProperty 에 지정한 이름으로 Map 객체가 생성되고 해당 객체 내에 조회 결과가 저장됨 
		-->
		<selectKey keyProperty="result" resultType="map" order="BEFORE">
			SELECT 
				IFNULL(MAX(reply_num), 0) AS reply_num -- reply_num 최대값 조회
				, (
					-- 동일한 부모 댓글(= 원본 댓글의 댓글번호)에 대한 댓글순서번호(reply_re_seq) 조회
					SELECT IFNULL(MAX(reply_re_seq), #{reply_re_seq}) 
					FROM tiny_reply_board
					WHERE parent_reply_num = #{reply_num}
				) AS reply_re_seq
			FROM tiny_reply_board
		</selectKey>
		<!-- selectKey 로 조회된 복수개의 컬럼데이터가 result 라는 이름의 Map 객체로 관리됨 -->
		<!-- 따라서, result.XXX 형식으로 데이터에 접근 가능 -->
		INSERT
		INTO tiny_reply_board
		VALUES (
			#{result.reply_num} + 1       -- 새 댓글번호(추가로 조회된 값 + 1)
			, #{board_num}
			, #{reply_num}                -- 부모 댓글의 댓글번호(전달받은 값 사용)
			, #{reply_writer}
			, #{reply_content}
			, #{reply_re_ref}             -- board_re_ref(전달받은 원본 댓글의 값 사용)
			, #{reply_re_lev} + 1         -- board_re_lev(전달받은 원본 댓글의 값 + 1 사용)
			, #{result.reply_re_seq} + 1  -- 새 댓글 순서번호(추가로 조회된 값 + 1)
			, now()              
			, #{reply_writer_ip} 
			, 0                           -- 댓글 삭제 상태(기본값 0, null 전달해도 0)
		)
	</insert>
	
	<!-- 댓글 삭제 작업 전 댓글 작성자 조회 - DELETE -->
	<!-- 댓글번호가 같고 작성자가 같은 레코드의 작성자 조회 -->
	<select id="selectTinyReplyWriter">
		SELECT reply_writer
		FROM tiny_reply_board
		WHERE
			reply_num = #{reply_num} 
			AND reply_writer = #{reply_writer}
	</select>
	
	<!-- 댓글 삭제 - DELETE -->
	<!-- 댓글번호가 같은 레코드 삭제 -->
<!-- 	<delete id="deleteTinyReplyBoard"> -->
<!-- 		DELETE -->
<!-- 		FROM tiny_reply_board -->
<!-- 		WHERE reply_num = #{reply_num} -->
<!-- 	</delete> -->
	<!-- 레코드 실제 삭제 대신 reply_delete_status 값을 1로 변경하여 삭제 마커 설정 - UPDATE -->
	<update id="deleteTinyReplyBoard">
		UPDATE tiny_reply_board
		SET reply_delete_status = 1
		WHERE reply_num = #{reply_num}
	</update>
</mapper>



































