<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.mvc_board.mapper.BankMapper">
	
	<!-- 엑세스토큰 정보 DB 저장 - INSERT -->
	<insert id="insertAccessToken">
		INSERT
		INTO bank_access_token
		VALUES (
			#{id}                      -- 사용자 아이디
			, #{token.user_seq_no}     -- 사용자 일련번호
			, #{token.access_token}
			, #{token.token_type}
			, #{token.expires_in}
			, #{token.refresh_token}
			, #{token.scope}
		)
	</insert>
	
	<!-- 기존 엑세스토큰 정보 조회 - SELECT -->
	<!-- 사용자일련번호(user_seq_no)가 일치하는 레코드의 엑세스토큰(access_token) 컬럼 조회 -->
	<select id="selectTokenInfo" resultType="string">
		SELECT access_token
		FROM bank_access_token
		WHERE user_seq_no = #{token.user_seq_no}
	</select>
	
	<!-- 엑세스토큰 정보 갱신 - UPDATE -->
	<!-- 사용자일련번호(user_seq_no)가 일치하는 레코드의 정보 갱신(사용자일련번호 제외 나머지) -->
	<update id="updateAccessToken">
		UPDATE bank_access_token
		SET
			access_token = #{token.access_token}
			, token_type = #{token.token_type}
			, expires_in = #{token.expires_in}
			, refresh_token = #{token.refresh_token}
			, scope = #{token.scope}
		WHERE user_seq_no = #{token.user_seq_no}
	</update>
	
	<!-- 사용자 토큰 정보 조회 - SELECT -->
	<select id="selectBankTokenInfo" resultType="bankToken">
		SELECT *
		FROM bank_access_token
		WHERE id = #{id}
	</select>
	
	<!-- =================================================================== -->
	<!-- 
	[ 사용자 계좌(대표계좌) 테이블 ]
	사용자번호(user_seq_no) - 문자 10자, PK
	계좌번호(account_num) - 문자 16자, UN, NN  => 임시로 마스킹 된 계좌번호 저장
	예금주명(account_holder_name) - 문자 16자, NN
	핀테크이용번호(fintech_use_num) - 문자 24자, UN, NN
	은행코드번호(account_bank_code) - 문자 3자, NN
	====================================================
	CREATE TABLE bank_account (
		user_seq_no VARCHAR(10) PRIMARY KEY,
	    account_num VARCHAR(16) UNIQUE NOT NULL,
	    account_holder_name VARCHAR(16) NOT NULL,
	    fintech_use_num VARCHAR(24) UNIQUE NOT NULL,
	    account_bank_code VARCHAR(3) NOT NULL
	);
	-->
	<!-- 사용자 대표계좌 정보 조회 - SELECT -->
	<!-- token 객체의 user_seq_no 값과 일치하는 레코드의 user_seq_no 값 조회 -->
	<select id="selectReprensetAccount" resultType="string">
		SELECT user_seq_no
		FROM bank_account
		WHERE user_seq_no = #{token.user_seq_no}
	</select>
	
	<!-- 사용자 대표계좌 정보 등록 - INSERT -->
	<!-- token 객체의 user_seq_no 와 별도의 account_num_masked(임시), account_holder_name, fintech_use_num 등록 -->
	<insert id="insertRepresentAccount">
		INSERT
		INTO bank_account
		VALUES (
			#{token.user_seq_no}
			, #{account_num_masked}
			, #{account_holder_name}
			, #{fintech_use_num}
		)
	</insert>
	
	<!-- 사용자 대표계좌 정보 변경 - UPDATE -->
	<!-- token 객체의 user_seq_no 가 일치하는 레코드의 나머지 정보 변경 -->
	<update id="updateRepresentAccount">
		UPDATE bank_account
		SET
			account_num = #{account_num_masked}
			, account_holder_name = #{account_holder_name}
			, fintech_use_num = #{fintech_use_num}
		WHERE 
			user_seq_no = #{token.user_seq_no}
	</update>
	
	<!-- ========================================================================== -->
	<!-- 
	[ 사용자 거래내역 테이블 - bank_transaction_info ]
	사용자번호(user_seq_no) - 문자 10자, NN  => 컨트롤러에서 세션 객체에 저장된 정보 전달 필요
	핀테크이용번호(fintech_use_num) - 문자 24자, NN
	거래타입(transaction_type) - 문자 2자, NN (WI : 출금, DE : 입금, TR : 송금) => 공통코드 테이블 사용 가능
	거래고유번호(API)(api_tran_id) - 문자 40자, UN, NN
	거래일시(API)(api_tran_dtm) - DATETIME, NN
	거래고유번호(참가기관)(bank_tran_id) - 문자 20자, UN, NN
	거래일시(참가기관)(bank_tran_date) - DATETIME, NN
	거래금액(tran_amt) - 정수, NN
	응답코드(rsp_code) - 문자 5자, NN
	응답메세지(rsp_message) - 문자 300자, NN
	입금기관 표준코드(dps_bank_code_std) - 문자 3자, NN
	입금기관 계좌번호(dps_account_num_masked) - 문자 20자, NN
	
	CREATE TABLE bank_transaction_info (
		user_seq_no VARCHAR(10) NOT NULL,
	    fintech_use_num VARCHAR(24) NOT NULL,
		transaction_type VARCHAR(2) NOT NULL,
		api_tran_id VARCHAR(40) UNIQUE NOT NULL,
		api_tran_dtm DATETIME NOT NULL,
		bank_tran_id VARCHAR(20) UNIQUE NOT NULL,
		bank_tran_date DATETIME NOT NULL,
		tran_amt INT NOT NULL,
		rsp_code VARCHAR(5) NOT NULL,
		rsp_message VARCHAR(300) NOT NULL,
		bank_rsp_code VARCHAR(3) NOT NULL,
		bank_rsp_message VARCHAR(100) NOT NULL,
		dps_bank_code_std VARCHAR(3) NOT NULL,
		dps_account_num_masked VARCHAR(20) NOT NULL
	);
	-->
	<!-- 이체(출금, 입금) 결과 저장 - INSERT -->
	<insert id="insertTransactionResult">
		INSERT
		INTO bank_transaction_info
		VALUES (
			#{withdrawResult.user_seq_no}
			, #{withdrawResult.fintech_use_num}
			, #{transactionType}
			, #{withdrawResult.api_tran_id}
<!-- 			, #{withdrawResult.api_tran_dtm} -->
			<!-- api_tran_dtm 은 문자열이므로 DATETIME 타입으로 변환(= 캐스팅) 할 경우 = CAST() 함수 활용 -->
<!-- 			, CAST(#{withdrawResult.api_tran_dtm} AS DATETIME) -->
			<!-- 단, 마이바티스에서는 TypeHandler 에 의해 자동으로 문자열 -> 날짜 및 시각으로 처리됨 -->
			<!-- api_tran_dtm 은 밀리초까지 포함되어 있음(yyyyMMddHHmmssnnn) => 자릿수 초과 -->
			<!-- 따라서, 기본적으로 초까지만 저장되도록 nnn 부분을 제거해야함 -->
			, LEFT(#{withdrawResult.api_tran_dtm}, 14)
			, #{withdrawResult.bank_tran_id}
			<!-- bank_tran_date 는 문자열로 연원일까지만 포함되므로 별도의 캐스팅 및 추출 없이 날짜로 변환됨 -->
			, #{withdrawResult.bank_tran_date}
			, #{withdrawResult.tran_amt}
			, #{withdrawResult.rsp_code}
			, #{withdrawResult.rsp_message}
			, #{withdrawResult.bank_rsp_code}
			, #{withdrawResult.bank_rsp_message}
			, #{withdrawResult.dps_bank_code_std}
			, #{withdrawResult.dps_account_num_masked}
		)
	</insert>
	
	<!-- 이체(출금, 입금) 결과 조회 - SELECT -->
	<!-- bank_tran_id 가 일치하는 레코드 조회 -->
	<select id="selectTransactionResult" resultType="map">
		SELECT *
		FROM bank_transaction_info
		WHERE bank_tran_id = #{bank_tran_id}
	</select>
	
	<!-- 사용자 계좌 정보 조회 - SELECT -->
	<!-- user_seq_no 가 일치하는 레코드 조회 -->
	<select id="selectBankAccountInfo" resultType="map">
		SELECT *
		FROM bank_account
		WHERE user_seq_no = #{user_seq_no}
	</select>
</mapper>
































